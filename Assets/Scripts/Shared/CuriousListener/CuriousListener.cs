using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class CuriousListener : MonoBehaviour
{
  [System.NonSerialized]
  public string curiousIdentity;

  public float radius;
  public LayerMask targetMask;
  public float delayListeningFootstep;
  public Transform affectedTransform;
  public CuriousMark markPrefab;

  public bool visualizeOnGizmos = false;

  void Start()
  {
    if (!affectedTransform)
    {
      affectedTransform = transform;
    }
  }

  List<Curiosity> currentCuriosities = new List<Curiosity>();
  public IEnumerator Listen()
  {
    while (true)
    {
      yield return new WaitForSeconds(delayListeningFootstep);
      var targetsInRadius = Physics.OverlapSphere(affectedTransform.position, radius, targetMask);
      foreach (var target in targetsInRadius)
      {
        var curiosity = target.GetComponent<Curiosity>();
        if (curiosity)
        {
          if (
            // Don't show the curiosity generated by owner.
            !curiosity.curiousIdentity.Equals(curiousIdentity) &&
            // Make sure to display one mark.
            currentCuriosities
              .Where(x => x)
              .All(x => x.curiousIdentity != curiosity.curiousIdentity)
          )
          {
            currentCuriosities.Add(curiosity);
            var curiositySpawnedPositionPredicted = Random.insideUnitSphere * (radius / 4);
            var curiositySpawnedPosition = target.transform.position + new Vector3(curiositySpawnedPositionPredicted.x, 10f, curiositySpawnedPositionPredicted.z);
            Instantiate<CuriousMark>(markPrefab, curiositySpawnedPosition, Quaternion.identity);
          }
        }
      }
      // Refresh the current curiosities list.
      currentCuriosities = currentCuriosities.Where(x => x).ToList();
    }
  }

  void OnDrawGizmos()
  {
    if (visualizeOnGizmos)
    {
      // Draw a yellow sphere at the transform's position
      Gizmos.color = Color.yellow;
      Gizmos.DrawWireSphere(affectedTransform.position, radius);
    }
  }
}
